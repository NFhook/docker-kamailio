#!KAMAILIO
# NFhook <telegant@qq.com>
# 2023-11-16 17:38:30
# Kamailio-v5.7.2
#
# Kamailio SIP Server v5.7 - default configuration script
#     - web: https://www.kamailio.org
#     - git: https://github.com/kamailio/kamailio
#
# Direct your questions about this file to: <sr-users@lists.kamailio.org>
#
# Refer to the Core CookBook at https://www.kamailio.org/wikidocs/
# for an explanation of possible statements, functions and parameters.
#
# Note: the comments can be:
#     - lines starting with #, but not the pre-processor directives,
#       which start with #!, like #!define, #!ifdef, #!endif, #!else, #!trydef,
#       #!subst, #!substdef, ...
#     - lines starting with //
#     - blocks enclosed in between /* */
# Note: the config performs symmetric SIP signaling
#     - it sends the reply to the source address of the request
#     - remove the use of force_rport() for asymmetric SIP signaling
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#     - debug level increased to 3, logs still sent to syslog
#     - debugger module loaded with cfgtrace enabled

# *** To enable mysql:
#!define WITH_MYSQL


# *** To enable authentication execute:
#     - enable mysql
#!define WITH_AUTH
#     - add users using 'kamctl' or 'kamcli'
#
# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#!define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
#
# *** To enable persistent user location execute:
#     - enable mysql
#!define WITH_USRLOCDB
#
# *** To enable presence server execute:
#     - enable mysql
#     - define WITH_PRESENCE
#     - if modified headers or body in config must be used by presence handling:
#     - define WITH_MSGREBUILD
#!define WITH_PRESENCE
# *** To enable nat traversal execute:
#     - define WITH_NAT
#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
#!define WITH_NAT
#!define WITH_NATSIPPING
# *** To use RTPEngine (instead of RTPProxy) for nat traversal execute:
#     - define WITH_RTPENGINE
#     - install RTPEngine: https://github.com/sipwise/rtpengine
#     - start RTPEngine:
#        rtpengine --listen-ng=127.0.0.1:2223 ...
#
# *** To enable PSTN gateway routing execute:
#     - define WITH_PSTN
#     - set the value of pstn.gw_ip
#     - check route[PSTN] for regexp routing condition
#
# *** To enable database aliases lookup execute:
#     - enable mysql
#     - define WITH_ALIASDB
#
# *** To enable speed dial lookup execute:
#     - enable mysql
#     - define WITH_SPEEDDIAL
#
# *** To enable multi-domain support execute:
#     - enable mysql
#     - define WITH_MULTIDOMAIN
#!define WITH_MULTIDOMAIN
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS
#
# *** To enable JSONRPC over HTTP(S) support execute:
#     - define WITH_JSONRPC
#     - adjust event_route[xhttp:request] for access policy
#!define WITH_JSONRPC
# *** To enable anti-flood detection execute:
#     - adjust pike and htable=>ipban settings as needed (default is
#       block if more than 16 requests in 2 seconds and ban for 300 seconds)
#     - define WITH_ANTIFLOOD
#!define WITH_ANTIFLOOD
# *** To load htable module execute:
#     - define WITH_HTABLE
#
# *** To block 3XX redirect replies execute:
#     - define WITH_BLOCK3XX
#
# *** To block 401 and 407 authentication replies execute:
#     - define WITH_BLOCK401407
#

#!define WITH_IPOPS
#!define WITH_AVPOPS
#!define WITH_DIALOG
#!define WITH_UAC
#!define WITH_DISPATCHER




# *** To enable VoiceMail routing execute:
#     - define WITH_VOICEMAIL
#     - set the value of voicemail.srv_ip
#     - adjust the value of voicemail.srv_port
#
# *** To enhance accounting execute:
#     - enable mysql
#     - define WITH_ACCDB
#     - add following columns to database
#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_DEBUG
#!define DBGLEVEL 3
#!else
#!define DBGLEVEL 2
#!endif

#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!trydef DBURL "mysql://kamailio:Kamailiorw4!@10.10.18.20/kamailio"
#!endif

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

#!ifdef WITH_ANTIFLOOD
# - hash table 'ipban' used to store blocked IP addresses
#!trydef WITH_HTABLE
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#	FLB_ - per branch flags
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

/* LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR, ... */
debug=DBGLEVEL

/* set to 'yes' to print log messages to terminal or use '-E' cli option */
log_stderror=yes

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
#log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes for each UDP socket
 * - value inherited by tcp_children and sctp_children when not set explicitely */
children=8

/* uncomment the next line to disable TCP (default on) */
# disable_tcp=yes

/* number of SIP routing processes for all TCP/TLS sockets */
# tcp_children=8

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
# auto_aliases=no

/* add local domain aliases - it can be set many times */
# alias="sip.mydomain.com"


/*
 * custom */
server_header="Server: Kamailio"
user_agent_header="User-Agent: Kamailio"

/* listen sockets - if none set, Kamailio binds to all local IP addresses
 * - basic prototype (full prototype can be found in Wiki - Core Cookbook):
 *      listen=[proto]:[localip]:[lport] advertise [publicip]:[pport]
 * - it can be set many times to add more sockets to listen to */
# listen=udp:10.0.0.10:5060
listen=udp:eth0:5060
listen=tcp:eth0:5060
/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

/* upper limit for TCP connections (it includes the TLS connections) */
tcp_max_connections=2048

#!ifdef WITH_JSONRPC
tcp_accept_no_cl=yes
#!endif

#!ifdef WITH_TLS
enable_tls=yes

/* upper limit for TLS connections */
tls_max_connections=2048
#!endif

/* set it to yes to enable sctp and load sctp.so module */
enable_sctp=no

####### Custom Parameters #########

/* These parameters can be modified at runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

#!ifdef WITH_PSTN
/* PSTN GW Routing
 *
 * - pstn.gw_ip: valid IP or hostname as string value, example:
 * pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
 *
 * - by default is empty to avoid misrouting */
pstn.gw_ip = "" desc "PSTN GW Address"
pstn.gw_port = "" desc "PSTN GW Port"
#!endif

#!ifdef WITH_VOICEMAIL
/* VoiceMail Routing on offline, busy or no answer
 *
 * - by default Voicemail server IP is empty to avoid misrouting */
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

####### Modules Section ########

/* set paths to location of modules */
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

#!ifdef WITH_JSONRPC
loadmodule "xhttp.so"
#!endif
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"


#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
/*
#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
#!else
#loadmodule "rtpproxy.so"
#!endif
*/
#!endif

#!ifdef WITH_DIALOG
loadmodule "dialog.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_HTABLE
loadmodule "htable.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_IPOPS
loadmodule "ipops.so"
#!endif

#!ifdef WITH_AVPOPS
loadmodule "avpops.so"
#!endif

#!ifdef WITH_UAC
loadmodule "uac.so"
#!endif

#!ifdef WITH_DISPATCHER
loadmodule "dispatcher.so"
#!endif


# ----------------- setting module-specific parameters ---------------


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")
#!ifdef WITH_JSONRPC
modparam("jsonrpcs", "transport", 7)
#!endif

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

# ----- sanity params -----
modparam("sanity", "autodrop", 0)

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
#modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "default_expires", 300)
modparam("registrar", "max_expires", 300)
modparam("registrar", "min_expires", 300)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)
/* set it to 0 to disable Path handling */
modparam("registrar", "use_path", 1)
/* save Path even if not listed in Supported header */
modparam("registrar", "path_mode", 0)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif

# ----- usrloc params -----
modparam("usrloc", "timer_interval", 5)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", MULTIDOMAIN)
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth", "nonce_expire", 900)   # Set nonce_expire to 600s
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", 1) #set 1 use password_column parameter. set 0 use HA1
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "load_backends", 1)
#!endif

#!endif

# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif

# ----- speeddial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif

# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
/* register callback to match myself condition with domains list */
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif

#!ifdef WITH_NAT
#!ifdef WITH_RTPENGINE
# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
#!else
# ----- rtpproxy params -----
#modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")
#!endif
# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@10.10.18.20")
#modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)
#!endif

#!ifdef WITH_HTABLE
# ----- htable params -----
#!ifdef WITH_ANTIFLOOD
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

#!ifdef WITH_AVPOPS
# ------ avpops use query/update/delete -----
modparam("avpops", "db_url", DBURL)
modparam("avpops","avp_table","gateway")

#!endif

#!ifdef WITH_DISPATCHER
modparam("dispatcher", "db_url", DBURL)
#!endif

####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */

request_route {

    xlog("L_INFO", "====================================================================\n");
    xlog("L_INFO", "$ci|start|recieved $oP request $rm $ou\n");
    xlog("L_INFO", "$ci|log|source $si:$sp\n");
    xlog("L_INFO", "$ci|log|from $fu\n");
    xlog("L_INFO", "$ci|log|to $tu\n");
    xlog("L_INFO", "$ci|log|sip message length $ml\n");
    xlog("L_INFO", "====================================================================\n");
    set_reply_no_connect();
    force_rport();
    if (nat_uac_test("19")  && is_ip_rfc1918($si) ) {
        if (is_method("REGISTER")) {
            fix_nated_register();
        } else {
            fix_nated_contact(); 
        }
        setflag(FLT_NATS);
    }
    #
    if (is_myself("$rd")) {
        if (is_method("OPTIONS") && uri==myself && $rU==$null ) {
            sl_send_reply("200", "Keepalive");
            exit;
        }
    }
    #
    if (!mf_process_maxfwd_header("10") && $retcode == -1) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }
    if (has_totag()) {

        if (loose_route()) {

            if (is_method("BYE")) {
                setflag(FLT_ACC); # do accounting ...
                setflag(FLT_ACCFAILED);
            } else if (is_method("INVITE")) {
                record_route();
            }
            if (check_route_param("nat=yes")) {
                setbflag(FLB_NATB);
            }
            route(RELAY);
        } else {

            if (is_method("ACK")) {
                if (t_check_trans()) {
                    t_relay();
                    exit;
                } else {
                    exit;
                }
            }
            sl_send_reply("404", "Not Here");
        }
        exit;
    }
    #
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }
    t_check_trans();
    #
    if (loose_route()) {
        if (!is_method("ACK")) {
            sl_send_reply(403, "Preload Route denied");
        }
        exit;
    }
    #
    if (!is_method("REGISTER|MESSAGE")) {
        record_route();
    }
    #
    #if (is_method("PUBLISH|SUBSCRIBE")) {
    #    route(PRESENCE);
    #}
    if (is_method("REGISTER")) {
        if (isflagset(FLT_NATS)) {
            setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING            
            #setbflag(FLB_NATSIPPING);
#!endif            
        }
        route(HANDLE_FOR_REGISTER);
    }
    if ($rU == $null) {
        sl_send_reply(484, "Address Incomplete");
        exit;
    }
    if (isbflagset(FLB_NATB)) {
        setflag(FLB_NATB);
    }
    route(RELAY);
}


route[HANDLE_FROM_FS] {
    if (is_method("INVITE")) {
        if (is_domain_local("$rd")) {
            if (registered("location", "$tu")) {
                if(!lookup("location")){
                    xlog("L_INFO","lookup from location where $fU contact address!\n");
                }
            } else {
                xlog("L_ERR","==> user $tu $rU is not register!\n");
                send_reply(404, "user $rU not registered");
                exit;
            }
        }
    }
    if (!t_relay()) {
        send_reply(500, "Internal Error");
        exit;
    }
}

route[HANDLE_FROM_VOS] {
    if (is_method("INVITE")) {
        if (!ds_select_dst(1, 4)) {
            send_reply(500, "No Destination FS available");
            exit;
        }
        t_on_failure("GW_FAILOVER");
        xlog("L_INFO", "call from vos sending call to FS $du\n");
    }
    if(!t_relay()) {
        send_reply(503, "Service Unavailable");
        exit;
    }
}

route[HANDLE_FROM_IMS] {
    xlog("L_INFO","handle from IMS and request uri is --> $ru \n");
}

route[HANDLE_FROM_USER] {
    # start auth if normal register user
    if (is_method("INVITE")) {
        $var(ret) = $null;
        $var(ret) = proxy_authorize("$fd", "subscriber");
        if ($var(ret) == 1) {
            if (!ds_select_dst("1", "4")) {
                send_reply(500, "No Destination FS available");
                exit;
            }
            t_on_failure("GW_FAILOVER");
            xlog("L_INFO", "call from normal register user sending call to FS $du\n");
            consume_credentials();
        } else if ($var(ret) == -3) { # user not exist
            route(HANDLE_FROM_GATEWAY_USER);
        } else {
            if ($var(ret) == -5) { # no auth header
                proxy_challenge("$fd", "1");
            } else if ($var(ret) == -2) {
                send_reply(403, "wrong user or pass");
            } else {
                send_reply(403, "Forbidden");
            }
            exit;
        }
    }
    if(!t_relay()) {
        send_reply(503, "Service Unavailable");
        exit;
    }
}

route[HANDLE_FROM_GATEWAY_USER] {
    # start auth gateway register user
    $var(ret) = $null;
    $var(ret) = proxy_authorize("$fd", "gateway");
    if ($var(ret) == 1) {
        append_hf("X-AUTH-SOURCE: sipTrunk\r\n"); 
        append_hf("X-AUTH-SOURCE_TYPE: GW_REGISTE\r\n");
        if (!ds_select_dst("1", "4")) {
            send_reply(500, "No Destination FS available");
            exit;
        }
        t_on_failure("GW_FAILOVER");
        xlog("L_INFO", "call from normal register gateway user sending call to FS $du\n");
        consume_credentials();
    } else {
        if ($var(ret) == -5) { # no auth header
            proxy_challenge("$fd", "1");
        } else if ($var(ret) == -3) { # user not exist
            send_reply(403, "normal and gateway register user is not exist");
        } else if ($var(ret) == -2) {
            send_reply(403, "wrong user or pass");
        } else {
            send_reply(403, "Forbidden");
        }
        exit;
    }

}

failure_route[GW_FAILOVER] {
    if (t_is_canceled()) {
        exit;
    }
    # failure detection with redirect to next available trunk
    if (t_check_status("(408)|([56][0-9][0-9])")) {
        xlog("L_ERR","Failed select next FS $rd/$du detected \n");
        xlog("L_INFO", "select next a new available freeswitch");
        # try route to FreeSWITCH with load_balancer
        if ( ds_next_dst() ) {
            t_on_failure("GW_FAILOVER");
            t_relay();
            exit;
        }
        send_reply(500, "All GW are down");
    }
}

# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	#if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
	#	if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	#}
	#if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
	#	if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	#}
	#if (is_method("INVITE")) {
	#	if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	#}
	#if (!t_relay()) {
	#	sl_reply_error();
	#}
	#exit;
    #xlog(" Relay<< method: $rm  From uir: $fu  -> To uri: $tu \n");
    if (isbflagset(FLB_NATB)) {
        add_rr_param(";nat=yes");
    }
    t_on_reply("HANDLE_NAT");
    if (is_method("INVITE")) {
        if (isbflagset(FLB_NATB)) {
            fix_nated_sdp("1");
        }
        t_on_branch("PER_BRANCH_OPS");
        t_on_reply("CHECK_EARLY_MEDIA");
        t_on_failure("MISSED_CALL");
    }

    #allow_source_address()
    if (allow_source_address("1") && !($ua =~ '^RTC')) {
        route(HANDLE_FROM_FS);
    } else if (allow_source_address("2")) {
        route(HANDLE_FROM_VOS);
    } else if (allow_source_address("3")) {
        route(HANDLE_FROM_IMS);
    } else {
        route(HANDLE_FROM_USER);
    }
}


# Handle SIP registrations.
route[HANDLE_FOR_REGISTER] {

    #if ((is_present_hf("Expires") && $(hdr(Expires){s.int})==0) || $hdr(Contact) =~ "expires=0") {
    if ((is_present_hf("Expires") && $(hdr(Expires){s.int})==0) || $sel(contact.expires) == "0") {

        #$var(uc) = unregister("location", "$fu", "$ulc(caller=>ruid)");
        #$var(uc) = unregister("location", "$sel(contact.uri)");
        $var(uc) = save("location");
        xlog("=== save() Retcode: $var(uc) ===\n rruid=$T_reply_ruid, ruid=$ruid, ulcruid=$ulc(caller=>ruid), fu=$fu, ru=$ru, tu=$tu, rd=$rd, ct=$ct, contact=$sel(contact.uri)\n");
        if ($var(uc) == 3) {
            $var(req) = "username=" + $au + "&domain=" + $ar + "&expires=" + $(hdr(Expires){s.int}) + "&contact=" + $sel(contact.uri) + "&userAgent=" + $ua;
            xlog(">>Unregister<< : $var(req) \n");
        } else {
            xlog("L_ERR", "user $fu is not registered\n");
            #send_reply(404, "user is not registered");
        }
        exit;
    } else {
        #start auth normal register user.
        $var(ret) = $null;
        $var(ret) = www_authorize("$td", "subscriber");
        if ($var(ret) == -5) { #not contain an Authorization header
            www_challenge("$td", "1");
        } else if ($var(ret) == -4) { #the nonce has expired
            if (registered("location", "$fu")) { # re register
                www_challenge("$td", "1");
            } else {
                www_challenge("$td", "1");
            }
        } else if ($var(ret) == -3) { #authentication user does not exist.
            xlog("L_INFO","$fu normal register user not exist and start check gateway register user\n");
            #send_reply(403, "user is not exist");
            route(HANDLE_FOR_GATEWAY_REGISTER);
        } else if ($var(ret) == -2) { #wrong password
            xlog("L_INFO", "$fu wrong user or pass\n");
            send_reply(403, "Wrong user or pass");
        } else if ($var(ret) == 1) {
            if (registered("location", "$fu")) {
                ## multiple registrations, try to remove the old one
                if (!reg_fetch_contacts("location", "$fu", "caller")) {
                    xlog(">>Contact<< : $fu Change Register Device:  $sel(contact.uri)\n");
                }
            }
            $var(rc) = save("location", "0x04");
            if ($var(rc) == 1) {
                $var(req) = "username=" + $au + "&domain=" + $ar + "&expires=" + $(hdr(Expires){s.int}) + "&contact=" + $sel(contact.uri) + "&userAgent=" + $ua;
                xlog(">>Register<< : $var(req) \n");
            } else if ($var(rc) == 2){
                $var(req) = "username=" + $au + "&domain=" + $ar + "&expires=" + $(hdr(Expires){s.int}) + "&contact=" + $sel(contact.uri) + "&userAgent=" + $ua;
                xlog(">>Update<< : $var(req) \n");
            }
        } else {
            xlog("L_ERR", "$fu Forbidden\n");
            send_reply(403, "Forbidden");
        }

    }
    exit;
}

route[HANDLE_FOR_GATEWAY_REGISTER] {
    #start auth gateway user register.
    $var(ret) = $null;
    $var(ret) = www_authorize("$td", "gateway");
    if ($var(ret) == -5) { #not contain an Authorization header
        www_challenge("$td", "1");
    } else if ($var(ret) == -4) { #the nonce has expired
        if (registered("location", "$fu")) { # re register
            www_challenge("$td", "1");
        } else {
            #www_challenge("$td", "1");
            send_reply(403, "stale nonce");
        }
    } else if ($var(ret) == -3) { #authentication user does not exist.
        xlog("L_INFO","$fu normal register user not exist and start check gateway register user\n");
        send_reply(403, "user is not exist");
    } else if ($var(ret) == -2) { #wrong password
        xlog("L_INFO", "$fu wrong user or pass\n");
        send_reply(403, "Wrong user or pass");
    } else if ($var(ret) == 1) {
        if (registered("location", "$fu")) {
            ## multiple registrations, try to remove the old one
            if (!reg_fetch_contacts("location", "$ru", "callee")) {
                xlog(">>Update<<:  $fu Change Gateway Register Device:  $hdr(Contact)\n");
            }
        }
        $var(rc) = save("location", "0x04");
        if ($var(rc) < 0) {
            xlog("L_ERR", "$fu save location failed\n");
            send_reply(503, "Service Unavailable");
        } else {
            xlog("xxxxxxxxxx: user: $sel(contact.uri.user) :xxxxxxxxxxxxxxxxxxxxx\n");
            xlog("xxxxxxxxxx: host: $sel(contact.uri.host) :xxxxxxxxxxxxxxxxxxxxx\n");
            xlog("xxxxxxxxxx: port: $sel(contact.uri.port) :xxxxxxxxxxxxxxxxxxxxx\n");
            if (!($sel(contact.uri.port))) {
                avp_db_query("UPDATE gateway set contact='$sel(contact.uri.host)' WHERE (username='$sel(contact.uri.user)')");
            } else {
                avp_db_query("UPDATE gateway set contact='$sel(contact.uri.host):$sel(contact.uri.port)' WHERE (username='$sel(contact.uri.user)')");
            }
            xlog("--- uri.user: $sel(contact.uri.user)  --- uri.host: $sel(contact.uri.host) --- uri.port: $sel(contact.uri.port) \n");
        }
    } else {
        xlog("L_ERR", "$fu Forbidden\n");
        send_reply(403, "Forbidden");
    }
    exit;

}

branch_route[PER_BRANCH_OPS] {
    xlog("==> new branch at: $Tf:  $fu \t -> \t $ru\n");
}

onreply_route[HANDLE_NAT] {
    if (isbflagset(FLB_NATB)) {
        fix_nated_contact();
    }
    if (nat_uac_test("1")) {
        fix_nated_contact();
    }
    xlog("incoming reply\n");
}

onreply_route[CHECK_EARLY_MEDIA] {
    if (t_check_status("180|183")) {
        #$var(to_tag) = $null;
        #cache_fetch("local", "$ci", $var(to_tag));
        #if ($var(to_tag) == $null) {
        #    cache_store("local", "$ci", "$tt", 120);
        #}
        xlog("L_INFO","------ check early_media ------\n");
    }
}

failure_route[MISSED_CALL] {
    if (t_is_canceled()) {
        exit;
    }
}

# JSONRPC over HTTP(S) routing
#!ifdef WITH_JSONRPC
event_route[xhttp:request] {
	set_reply_close();
	set_reply_no_connect();
	if(src_ip!=127.0.0.1) {
		xhttp_reply("403", "Forbidden", "text/html",
				"<html><body>Not allowed from $si</body></html>");
		exit;
	}
	if ($hu =~ "^/RPC") {
		jsonrpc_dispatch();
		exit;
	}

	xhttp_reply("200", "OK", "text/html",
				"<html><body>Wrong URL $hu</body></html>");
    exit;
}
#!endif

